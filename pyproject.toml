[build-system]
    requires = ["poetry-core>=1.2", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
    build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
    name = "pandoc-numbering"
    version = "0.0.0.0"
    description="A pandoc filter for automatic numbering"
    authors = ["Christophe Demko <chdemko@gmail.com>"]
    license = "BSD-3-Clause"
    readme = "README.md"
    homepage="https://github.com/chdemko/pandoc-numbering"
    keywords=["pandoc", "filters", "numbering"]
    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        # How mature is this project? Common values are
        #   3 - Alpha
        #   4 - Beta
        #   5 - Production/Stable
        "Development Status :: 5 - Production/Stable",
        # Specify the OS
        "Operating System :: OS Independent",
        # Indicate who your project is intended for
        "Environment :: Console",
        "Intended Audience :: End Users/Desktop",
        "Intended Audience :: Developers",
        "Topic :: Software Development :: Build Tools",
        "Topic :: Software Development :: Documentation",
        "Topic :: Text Processing :: Filters",
        # Specify the Python versions you support here. In particular, ensure
        # that you indicate whether you support Python 2, Python 3 or both.
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        # Natural language used
        "Natural Language :: English",
    ]
    packages = [{include = "pandoc_numbering.py"}]


[tool.poetry.dependencies]
    python = "^3.9"
    panflute = "^2.3.0"

[tool.poetry.group.dev.dependencies]
    # pre-commit
    pre-commit = "^3.4.0"

    # Test
    tox = "^4.11.1"

    # Formatter
    black = "^23.7.0"

    # Tests
    pytest = "^7.4.1"
    pytest-cov = "^4.1.0"

    # Style checkers
    doc8 = "^0.11.2"
    mypy = "^1.5.1"
    flake8 = "^6.1.0"
    flake8-pyproject = "^1.2.3"
    flake8-annotations-complexity = "^0.0.7"
    flake8-black = "^0.3.6"
    flake8-blind-except = "^0.2.1"
    flake8-bugbear = "^23.7.10"
    flake8-builtins = "^2.1.0"
    flake8-cognitive-complexity = "^0.1.0"
    flake8-comprehensions = "^3.14.0"
    flake8-docstrings = "^1.7.0"
    flake8-expression-complexity = "^0.0.11"
    flake8-fixme = "^1.1.1"
    flake8-functions = "^0.0.7"
    flake8-import-order = "^0.18.2"
    flake8-mypy = "^17.8.0"
    flake8-pyi = "^23.6.0"
    flake8-pydocstyle = "^0.2.2"
    flake8-return = "^1.2.0"
    flake8-simplify = "^0.19.3"
    flake8-spellcheck = "^0.28.0"
    flake8-use-fstring = "^1.4"
    flake8-variables-names = "^0.0.5"
    pep8-naming = "^0.13.3"
    pylint = {version = "^2.17.5", python = ">=3.9"}
    ruff = "^0.0.254"
    darglint = "^1.8.1"
    teyit = {version = "^0.4.3", python = ">=3.9"}
    slotscheck = "^0.16.5"
    refurb = {version = "^1.20.0", python = ">=3.10"}

[tool.poetry.group.docs]
    optional = true

[tool.poetry.group.docs.dependencies]
    sphinx = "^7.2"
    sphinx_rtd_theme = "^1.3"
    myst-parser = "^2.0"

[tool.poetry.scripts]
    pandoc-numbering = "pandoc_numbering:main"

[tool.poetry-dynamic-versioning]
    enable = true
    pattern = """(?x)                                                    (?# ignore whitespace)
        ^((?P<epoch>\\d+)!)?(?P<base>\\d+(\\.\\d+)*)                 (?# 1.2.3 or 1!2000.1.2)
        ([-._]?((?P<stage>[a-zA-Z]+)[-._]?(?P<revision>\\d+)?))?     (?# b0)
        (\\+(?P<tagged_metadata>.+))?$                               (?# +linux)
    """
    format-jinja = """
        {%- if distance == 0 -%}
            {%- if epoch|length -%}
                {{ serialize_pep440(base, stage, revision, epoch=epoch) }}
            {%- else -%}
                {{ serialize_pep440(base, stage, revision) }}
            {%- endif -%}
        {%- elif revision is not none -%}
            {%- if epoch|length -%}
                {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit], epoch=epoch) }}
            {%- else -%}
                {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}
            {%- endif -%}
        {%- else -%}
            {%- if epoch|length -%}
                {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit], epoch=epoch) }}
            {%- else -%}
                {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}
            {%- endif -%}
        {%- endif -%}
    """

[tool.flake8]
    ignore = [
        # One-line docstring should fit on one line with quotes
        "D200",
        # Missing docstring in public method
        "D105",
        # line break before binary operator
        "W503",
        # Returning Any from function declared to return "..."
        "T484",
        # Multi-line construct missing trailing comma
        "S101",
        # Found ... errors in ... file (checked ... source file)
        "T499",
        # Cognitive complexity is too high
        "CCR001",
        # Function "__init__" has ... arguments that exceeds max allowed 6
        "CFQ002",
        # whitespace before ":"
        "E203",
        # Function attributes has length ... that exceeds max allowed length 100
        "CFQ001",
        # Function ... has ... returns that exceeds max allowed 3
        "CFQ004",
        # fixme found (TODO)
        "T101",
        # SIM119 Use a dataclass for "class ..."
        "SIM119",
        # Spelling error in name (e.g. variable, function, class)
        "SC200",
        # undefined name TODO: remove
        "F821",
        # The docstring parameter type doesn't match function.
        "DAR103",
    ]

    exclude = "*.pyi"
    max-line-length = 88
    statistics = true

    # flake8-docstrings
    docstring-convention = "numpy"

    # darglint
    docstring_style = "numpy"

[tool.pydocstyle]
    convention = "numpy"

[tool.mypy]
    # equivalent to --strict option
    warn_unused_configs = true
    disallow_any_generics = true
    disallow_subclassing_any = true
    # disallow_untyped_calls = true
    # disallow_untyped_defs = true
    # disallow_incomplete_defs = true
    # check_untyped_defs = true
    disallow_untyped_decorators = true
    no_implicit_optional = true
    warn_redundant_casts = true
    warn_unused_ignores = true
    warn_return_any = true
    no_implicit_reexport = true

